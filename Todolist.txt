import React, { useState } from 'react';
import {
  View,
  Text,
  TextInput,
  Button,
  StyleSheet,
  SafeAreaView,
  ScrollView,
} from 'react-native';
import RNPickerSelect from 'react-native-picker-select';

const priorities = [
  { label: 'Low', value: 'Low' },
  { label: 'Medium', value: 'Medium' },
  { label: 'High', value: 'High' },
];

const statuses = [
  { label: 'New', value: 'New' },
  { label: 'In Progress', value: 'In Progress' },
  { label: 'Completed', value: 'Completed' },
];

const categories = [
  { label: 'Work', value: 'Work' },
  { label: 'Personal', value: 'Personal' },
  { label: 'Home', value: 'Home' },
];

export default function App() {
  const [tasks, setTasks]: any = useState([]);
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [dueDate, setDueDate] = useState('');
  const [priority, setPriority] = useState('');
  const [status, setStatus] = useState('');
  const [category, setCategory] = useState('');
  const [editingTaskId, setEditingTaskId] = useState(null);

  const Task = ({ task }) => {
  const priorityColor = {
    Low: '#b8ffdc',
    Medium: '#ffeb9d',
    High: '#ffb3b3',
  };

  const statusColor = {
    New: '#b8ffdc',
    InProgress: '#ffcc00',
    Completed: '#ff3333',
  };

  return (
    <View style={[styles.task, { backgroundColor: priorityColor[task.priority] }]}>
      <Text style={styles.title}>{task.title}</Text>
      <Text>{task.description}</Text>
      <Text>Due: {task.dueDate}</Text>
      <Text style={{ color: statusColor[task.status]}}>
        Priority: {task.priority}
      </Text>
      <Text>Category: {task.category}</Text>
      <View style={styles.rowWrapper}>
      <Button title="Update" onPress={() => updateTask(task.id)} />
      <Button title="Delete" onPress={() => deleteTask(task.id)} />
      </View>
    </View>
  );
};

  const addTask = () => {
    if (title.trim() !== '') {
      const newTask = {
        id: Math.random().toString(36).substring(7),
        title: title,
        description: description,
        dueDate: dueDate,
        priority: priority,
        status: status,
        category: category,
      };
      if (editingTaskId) {
        const i = tasks.findIndex(task => task.id == editingTaskId)
        tasks[i] = newTask
      } else {
        setTasks([...tasks, newTask]);
      }
      setTitle('');
      setDescription('');
      setDueDate('');
      setPriority('');
      setStatus('');
      setCategory('');
      setEditingTaskId(null)
    }
  };

  const deleteTask = (taskId) => {
    const updatedTasks = tasks.filter((task) => task.id !== taskId);
    setTasks(updatedTasks);
  };

  const updateTask = (id) => {
    tasks.map((task) => {
      if (task.id == id) {
        setEditingTaskId(id);
        setTitle(task.title);
        setDescription(task.description);
        setDueDate(task.dueDate);
        setPriority(task.priority);
        setStatus(task.status);
        setCategory(task.category);
      }
    });
  };


  return (
    <SafeAreaView style={styles.safeContainer}>
      <View style={styles.container}>
      <TextInput
        style={styles.input}
        placeholder="Title"
        value={title}
        onChangeText={(text) => setTitle(text)}
      />
      <TextInput
        style={styles.input}
        placeholder="Description"
        value={description}
        onChangeText={(text) => setDescription(text)}
        multiline
        numberOfLines={5}
      />
      <View style={styles.rowWrapper}>
        <View style={{ width: '45%' }}>
          <RNPickerSelect
            style={styles.pickerSelectStyles}
            placeholder={{ label: 'Priority', value: null }}
            items={priorities}
            onValueChange={(value) => setPriority(value)}
          />
        </View>
        <View style={{ width: '45%' }}>
          <RNPickerSelect
            style={styles.pickerSelectStyles}
            placeholder={{ label: 'Status', value: null }}
            items={statuses}
            onValueChange={(value) => setStatus(value)}
          />
        </View>
      </View>
      <View style={styles.rowWrapper}>
        <View style={{ width: '45%' }}>
          <RNPickerSelect
            style={styles.pickerSelectStyles}
            placeholder={{ label: 'Category', value: null }}
            items={categories}
            onValueChange={(value) => setCategory(value)}
          />
        </View>
        <View style={{ width: '45%' }}>
          <Text>Add Date Picker</Text>
        </View>
      </View>
      <Button title="Add Task" onPress={addTask} />
      <ScrollView style={styles.taskList}>
        {tasks.map((task, index) => (
          <Task key={index} task={task} onDelete={() => handleDeleteTask(index)} />
        ))}
      </ScrollView>
    </View>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  safeContainer: {
    flex: 1,
    padding: 20,
    backgroundColor: '#fff',
  },
    container: {
    flex: 1,
    paddingTop: 50,
    backgroundColor: '#fff',
  },
  input: {
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: 5,
    padding: 10,
    marginBottom: 10,
  },
  task: {
    marginBottom: 20,
    borderBottomWidth: 1,
    padding: 10,
  },
   title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 5,
  },
  rowWrapper: { flexDirection: 'row', justifyContent: 'space-between' },
  pickerSelectStyles: {
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: 5,
    padding: 10,
    marginBottom: 10,
  },
  taskList: {
    flex: 1,
    paddingTop: 20,
  },
});